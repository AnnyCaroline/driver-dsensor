///////////////////////////////////////////////////////////////////////////////
// EXTERNAL INTERFACE
///////////////////////////////////////////////////////////////////////////////
//ToDo: code/await DSensor(var int dataPort, var int? energyPort, var int? time) -> (event bool change) -> NEVER;

///////////////////////////////////////////////////////////////////////////////
// DECLARATIONS
///////////////////////////////////////////////////////////////////////////////
#define D_SENSOR_DEFAULT_TIME 1

///////////////////////////////////////////////////////////////////////////////
// VARIABLES
///////////////////////////////////////////////////////////////////////////////
//output bool D_SENSOR_CHANGE;

///////////////////////////////////////////////////////////////////////////////
// ABSTRACTIONS
///////////////////////////////////////////////////////////////////////////////
#include "pcint0.ceu"
#include "wclock.ceu"

code/await DSensor(var int dataPort, var int? energyPort, var int? time) -> (event bool change) -> NEVER do
    do finalize with
        if (energyPort?) then
            _digitalWrite(energyPort!, low);
        end

        //ToDo Verify
        call PCINT0_Enable(dataPort, off);
    end

    if (energyPort?) then
        //turn on
        {
            pinMode(@energyPort!, OUTPUT);
            digitalWrite(@energyPort!, HIGH);
        }

        // waits for the circuit to stabilize
        if (time?) then
            await (time!)ms;
        else
            await (D_SENSOR_DEFAULT_TIME)ms;
        end
    end    

    //ToDo Verify
    if (dataPort == _PCINT4 or dataPort == _PCINT5) then
        call PCINT0_Enable(dataPort, on);

        var& PCINT0_Demux pcint0 = spawn PCINT0_Demux();

        loop do
            var int pin;
            var high/low v;

            (pin,v) = await pcint0.e until (pin == dataPort);
            
            _Serial.println("change");
            emit change(v);
        end
    end    
end

